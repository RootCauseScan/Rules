rules:
  # Code Injection Vulnerabilities
  - id: py.no-eval
    severity: HIGH
    description: Avoid using eval() function with untrusted input
    message: Do not use eval() with untrusted input as it can lead to code injection
    category: python
    pattern: "eval(...)"
    remediation: Use ast.literal_eval() or other safe alternatives
    metadata:
      cwe: ["CWE-94: Improper Control of Generation of Code ('Code Injection')"]
      owasp: ["A03:2021 - Injection"]
      confidence: HIGH

  - id: py.no-exec
    severity: HIGH
    description: Avoid using exec() function with untrusted input
    message: Do not use exec() with untrusted input as it can lead to code injection
    category: python
    pattern: "exec(...)"
    remediation: Use safer alternatives or validate input thoroughly
    metadata:
      cwe: ["CWE-94: Improper Control of Generation of Code ('Code Injection')"]
      owasp: ["A03:2021 - Injection"]
      confidence: HIGH

  # Deserialization Vulnerabilities
  - id: py.pickle-load
    severity: HIGH
    description: Avoid pickle.load() on untrusted data
    message: pickle.load() can execute arbitrary code during deserialization
    category: python
    pattern: "pickle.load(...)"
    remediation: Use json.loads() or other safe deserialization methods
    metadata:
      cwe: ["CWE-502: Deserialization of Untrusted Data"]
      owasp: ["A08:2021 - Software and Data Integrity Failures"]
      confidence: HIGH

  - id: py.pickle-loads
    severity: HIGH
    description: Avoid pickle.loads() on untrusted data
    message: pickle.loads() can execute arbitrary code during deserialization
    category: python
    pattern: "pickle.loads(...)"
    remediation: Use json.loads() or other safe deserialization methods
    metadata:
      cwe: ["CWE-502: Deserialization of Untrusted Data"]
      owasp: ["A08:2021 - Software and Data Integrity Failures"]
      confidence: HIGH

  # Command Injection
  - id: py.subprocess-shell
    severity: HIGH
    description: Avoid using shell=True in subprocess calls
    message: Using shell=True can lead to command injection vulnerabilities
    category: python
    patterns:
      - pattern: subprocess.run(..., shell=True, ...)
      - pattern: subprocess.call(..., shell=True, ...)
      - pattern: subprocess.Popen(..., shell=True, ...)
      - pattern: subprocess.check_output(..., shell=True, ...)
    remediation: Use shell=False and pass arguments as a list
    metadata:
      cwe: ["CWE-78: OS Command Injection"]
      owasp: ["A03:2021 - Injection"]
      confidence: HIGH

  # YAML Security
  - id: py.yaml-load
    severity: MEDIUM
    description: Avoid yaml.load() on untrusted data
    message: yaml.load() can execute arbitrary code during deserialization
    category: python
    pattern: "yaml.load(...)"
    remediation: Use yaml.safe_load() instead
    metadata:
      cwe: ["CWE-502: Deserialization of Untrusted Data"]
      owasp: ["A08:2021 - Software and Data Integrity Failures"]
      confidence: HIGH

  # Insecure Temporary Files
  - id: py.insecure-tempfile
    severity: MEDIUM
    description: Avoid using insecure temporary file creation
    message: Using insecure temporary file creation can lead to race conditions
    category: python
    patterns:
      - pattern: tempfile.mktemp(...)
      - pattern: os.tmpnam(...)
    remediation: Use tempfile.mkstemp() or tempfile.NamedTemporaryFile()
    metadata:
      cwe: ["CWE-377: Insecure Temporary File"]
      owasp: ["A04:2021 - Insecure Design"]
      confidence: MEDIUM

  # HTTP Security
  - id: py.requests-verify-false
    severity: HIGH
    description: Avoid disabling SSL verification in requests
    message: Disabling SSL verification can lead to man-in-the-middle attacks
    category: python
    patterns:
      - pattern: requests.get(..., verify=False, ...)
      - pattern: requests.post(..., verify=False, ...)
      - pattern: requests.put(..., verify=False, ...)
      - pattern: requests.delete(..., verify=False, ...)
      - pattern: requests.patch(..., verify=False, ...)
    remediation: Always use verify=True or provide proper certificate validation
    metadata:
      cwe: ["CWE-295: Improper Certificate Validation"]
      owasp: ["A07:2021 - Identification and Authentication Failures"]
      confidence: HIGH

  # Cryptographic Issues
  - id: py.weak-crypto-md5
    severity: MEDIUM
    description: Avoid using MD5 for cryptographic purposes
    message: MD5 is cryptographically broken and should not be used for security purposes
    category: python
    patterns:
      - pattern: hashlib.md5(...)
      - pattern: md5(...)
    remediation: Use SHA-256 or stronger hash functions
    metadata:
      cwe: ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"]
      owasp: ["A02:2021 - Cryptographic Failures"]
      confidence: HIGH

  - id: py.weak-crypto-sha1
    severity: MEDIUM
    description: Avoid using SHA-1 for cryptographic purposes
    message: SHA-1 is cryptographically broken and should not be used for security purposes
    category: python
    patterns:
      - pattern: hashlib.sha1(...)
      - pattern: sha1(...)
    remediation: Use SHA-256 or stronger hash functions
    metadata:
      cwe: ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"]
      owasp: ["A02:2021 - Cryptographic Failures"]
      confidence: HIGH

  # Input Validation
  - id: py.no-input-validation
    severity: MEDIUM
    description: Ensure proper input validation in web applications
    message: Missing input validation can lead to various security vulnerabilities
    category: python
    patterns:
      - pattern-inside: |
          def $FUNC($REQ, ...):
            ...
            $REQ.get(...)
            ...
      - pattern-not-inside: |
          def $FUNC($REQ, ...):
            ...
            if $VALIDATION:
              ...
            $REQ.get(...)
            ...
    remediation: Always validate and sanitize user input
    metadata:
      cwe: ["CWE-20: Improper Input Validation"]
      owasp: ["A03:2021 - Injection"]
      confidence: LOW

  # File Operations
  - id: py.path-traversal
    severity: HIGH
    description: Avoid path traversal vulnerabilities in file operations
    message: Path traversal can allow access to files outside intended directory
    category: python
    patterns:
      - pattern: open($PATH, ...)
      - pattern: file($PATH, ...)
      - pattern: os.path.join(..., $PATH)
    remediation: Validate and sanitize file paths, use os.path.abspath() and os.path.commonpath()
    metadata:
      cwe: ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"]
      owasp: ["A01:2021 - Broken Access Control"]
      confidence: MEDIUM

  # Debug Information
  - id: py.debug-info-exposure
    severity: MEDIUM
    description: Avoid exposing debug information in production
    message: Debug information should not be exposed in production environments
    category: python
    patterns:
      - pattern: print($DEBUG_INFO)
      - pattern: logging.debug($DEBUG_INFO)
      - pattern: pdb.set_trace()
    remediation: Remove or disable debug statements in production
    metadata:
      cwe: ["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"]
      owasp: ["A05:2021 - Security Misconfiguration"]
      confidence: MEDIUM

  # SQL Injection (if using raw SQL)
  - id: py.sql-injection
    severity: HIGH
    description: Avoid SQL injection vulnerabilities
    message: String concatenation in SQL queries can lead to SQL injection
    category: python
    patterns:
      - pattern: 'SELECT * FROM $TABLE WHERE $COLUMN = " + $VAR'
      - pattern: 'INSERT INTO $TABLE VALUES (" + $VAR + ")"'
      - pattern: 'UPDATE $TABLE SET $COLUMN = " + $VAR'
      - pattern: 'DELETE FROM $TABLE WHERE $COLUMN = " + $VAR'
    remediation: Use parameterized queries or ORM methods
    metadata:
      cwe: ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]
      owasp: ["A03:2021 - Injection"]
      confidence: HIGH
